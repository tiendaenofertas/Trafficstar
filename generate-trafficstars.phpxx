<?php
/**
 * GENERADOR WEB - Dashboard Trafficstars v2.0
 * 
 * Este script se ejecuta desde el NAVEGADOR WEB
 * Solo abre este archivo en tu navegador y haz clic en "Generar Proyecto"
 * 
 * URL ejemplo: http://localhost/generate-trafficstars-web.php
 */

// Si se está procesando la generación
if (isset($_POST['generate'])) {
    $install_path = !empty($_POST['install_path']) ? $_POST['install_path'] : __DIR__;
    $result = generateProject($install_path);
}

// Función principal de generación
function generateProject($install_path) {
    $messages = [];
    $success = true;
    
    try {
        // Verificar/crear directorio
        if (!is_dir($install_path)) {
            if (!mkdir($install_path, 0755, true)) {
                throw new Exception("No se pudo crear el directorio: $install_path");
            }
        }
        
        // Cambiar al directorio
        $original_dir = getcwd();
        chdir($install_path);
        
        // Crear estructura de directorios
        $messages[] = ['type' => 'header', 'text' => 'Creando estructura de directorios...'];
        
        $directories = [
            'logs' => 0755,
            'cache' => 0755,
            'sessions' => 0700,
            'backups' => 0700,
            'assets' => 0755,
            'assets/css' => 0755,
            'assets/js' => 0755,
            'includes' => 0755
        ];
        
        foreach ($directories as $dir => $perms) {
            if (!is_dir($dir)) {
                if (mkdir($dir, $perms, true)) {
                    $messages[] = ['type' => 'success', 'text' => "Directorio '$dir' creado"];
                } else {
                    $messages[] = ['type' => 'error', 'text' => "Error al crear directorio '$dir'"];
                    $success = false;
                }
            } else {
                $messages[] = ['type' => 'warning', 'text' => "Directorio '$dir' ya existe"];
            }
        }
        
        // Crear archivos
        $messages[] = ['type' => 'header', 'text' => 'Creando archivos del proyecto...'];
        
        // LOGIN.HTML
        $login_html = '<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Dashboard Trafficstars</title>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: #0f0f23;
            color: #e4e4e7;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1rem;
            position: relative;
            overflow: hidden;
        }

        /* Fondo animado */
        .bg-animation {
            position: fixed;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: -1;
            opacity: 0.5;
        }

        .bg-animation::before,
        .bg-animation::after {
            content: \'\';
            position: absolute;
            width: 400px;
            height: 400px;
            border-radius: 50%;
            filter: blur(100px);
        }

        .bg-animation::before {
            background: radial-gradient(circle, #60a5fa 0%, transparent 70%);
            top: -200px;
            right: -200px;
            animation: float 20s ease-in-out infinite;
        }

        .bg-animation::after {
            background: radial-gradient(circle, #a78bfa 0%, transparent 70%);
            bottom: -200px;
            left: -200px;
            animation: float 25s ease-in-out infinite reverse;
        }

        @keyframes float {
            0%, 100% { transform: translate(0, 0) scale(1); }
            25% { transform: translate(50px, -50px) scale(1.1); }
            50% { transform: translate(-50px, 50px) scale(0.9); }
            75% { transform: translate(-50px, -50px) scale(1.05); }
        }

        /* Contenedor de login */
        .login-container {
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 24px;
            padding: 3rem;
            width: 100%;
            max-width: 450px;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
            position: relative;
            overflow: hidden;
        }

        .login-container::before {
            content: \'\';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #60a5fa, #a78bfa);
        }

        /* Logo y título */
        .login-header {
            text-align: center;
            margin-bottom: 2.5rem;
        }

        .logo {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #60a5fa 0%, #a78bfa 100%);
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
            font-size: 2rem;
            box-shadow: 0 10px 25px -5px rgba(96, 165, 250, 0.3);
            animation: pulse 3s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        h1 {
            font-size: 2rem;
            font-weight: 700;
            background: linear-gradient(135deg, #60a5fa 0%, #a78bfa 100%);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
        }

        .subtitle {
            color: #94a3b8;
            font-size: 0.875rem;
        }

        /* Formulario */
        .form-group {
            margin-bottom: 1.5rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #94a3b8;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .input-wrapper {
            position: relative;
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #64748b;
            font-size: 1.25rem;
        }

        input {
            width: 100%;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: #e4e4e7;
            padding: 0.875rem 1rem 0.875rem 3rem;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        input:focus {
            outline: none;
            border-color: #60a5fa;
            background: rgba(255, 255, 255, 0.08);
            box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1);
        }

        /* Checkbox personalizado */
        .checkbox-wrapper {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 2rem;
        }

        .checkbox-label {
            display: flex;
            align-items: center;
            cursor: pointer;
            user-select: none;
        }

        .checkbox-label input[type="checkbox"] {
            width: auto;
            height: auto;
            margin: 0;
            opacity: 0;
            position: absolute;
        }

        .checkbox-custom {
            width: 20px;
            height: 20px;
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            margin-right: 0.75rem;
            position: relative;
            transition: all 0.3s ease;
        }

        .checkbox-label input[type="checkbox"]:checked + .checkbox-custom {
            background: linear-gradient(135deg, #60a5fa 0%, #a78bfa 100%);
            border-color: transparent;
        }

        .checkbox-custom::after {
            content: \'\';
            position: absolute;
            top: 3px;
            left: 6px;
            width: 6px;
            height: 10px;
            border: solid white;
            border-width: 0 2px 2px 0;
            transform: rotate(45deg) scale(0);
            transition: transform 0.2s ease;
        }

        .checkbox-label input[type="checkbox"]:checked + .checkbox-custom::after {
            transform: rotate(45deg) scale(1);
        }

        .forgot-password {
            color: #60a5fa;
            text-decoration: none;
            font-size: 0.875rem;
            transition: color 0.3s ease;
        }

        .forgot-password:hover {
            color: #93c5fd;
        }

        /* Botón de login */
        .btn-login {
            width: 100%;
            background: linear-gradient(135deg, #60a5fa 0%, #a78bfa 100%);
            color: white;
            border: none;
            padding: 1rem;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(96, 165, 250, 0.5);
        }

        .btn-login:active {
            transform: translateY(0);
        }

        .btn-login:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        /* Loader del botón */
        .btn-loader {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top-color: white;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Alertas */
        .alert {
            padding: 1rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            display: none;
            animation: slideDown 0.3s ease-out;
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .alert-error {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.2);
            color: #fca5a5;
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.2);
            color: #86efac;
        }

        .alert-info {
            background: rgba(96, 165, 250, 0.1);
            border: 1px solid rgba(96, 165, 250, 0.2);
            color: #93c5fd;
        }

        /* Footer */
        .login-footer {
            text-align: center;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid rgba(255, 255, 255, 0.05);
        }

        .login-footer p {
            color: #64748b;
            font-size: 0.875rem;
        }

        .login-footer a {
            color: #60a5fa;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .login-footer a:hover {
            color: #93c5fd;
        }

        /* Responsive */
        @media (max-width: 480px) {
            .login-container {
                padding: 2rem;
            }

            h1 {
                font-size: 1.5rem;
            }
        }

        /* Modo demo */
        .demo-credentials {
            background: rgba(96, 165, 250, 0.1);
            border: 1px solid rgba(96, 165, 250, 0.2);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            font-size: 0.875rem;
        }

        .demo-credentials strong {
            color: #60a5fa;
        }
    </style>
</head>
<body>
    <div class="bg-animation"></div>

    <div class="login-container">
        <div class="login-header">
            <div class="logo">📊</div>
            <h1>Trafficstars</h1>
            <p class="subtitle">Accede a tu dashboard de estadísticas</p>
        </div>

        <!-- Alertas -->
        <div class="alert alert-error" id="errorAlert"></div>
        <div class="alert alert-success" id="successAlert"></div>
        <div class="alert alert-info" id="infoAlert"></div>

        <!-- Credenciales de demo (eliminar en producción) -->
        <div class="demo-credentials" id="demoInfo">
            <strong>🔐 Credenciales de prueba:</strong><br>
            Usuario: admin@trafficstars.com<br>
            Contraseña: admin123
        </div>

        <form id="loginForm" onsubmit="handleLogin(event)">
            <div class="form-group">
                <label for="email">Correo Electrónico</label>
                <div class="input-wrapper">
                    <span class="input-icon">📧</span>
                    <input 
                        type="email" 
                        id="email" 
                        name="email" 
                        placeholder="tu@email.com" 
                        required
                        autocomplete="email"
                    >
                </div>
            </div>

            <div class="form-group">
                <label for="password">Contraseña</label>
                <div class="input-wrapper">
                    <span class="input-icon">🔒</span>
                    <input 
                        type="password" 
                        id="password" 
                        name="password" 
                        placeholder="••••••••" 
                        required
                        autocomplete="current-password"
                    >
                </div>
            </div>

            <div class="checkbox-wrapper">
                <label class="checkbox-label">
                    <input type="checkbox" id="remember" name="remember">
                    <span class="checkbox-custom"></span>
                    <span>Recordarme</span>
                </label>
                <a href="#" class="forgot-password" onclick="showForgotPassword()">¿Olvidaste tu contraseña?</a>
            </div>

            <button type="submit" class="btn-login" id="loginBtn">
                <span id="btnText">Iniciar Sesión</span>
                <div class="btn-loader" id="btnLoader"></div>
            </button>
        </form>

        <div class="login-footer">
            <p>¿No tienes cuenta? <a href="#" onclick="showRegisterInfo()">Regístrate aquí</a></p>
        </div>
    </div>

    <script>
        // Variables globales
        let loginAttempts = 0;
        const maxAttempts = 3;

        // Manejar el envío del formulario
        async function handleLogin(event) {
            event.preventDefault();
            
            const email = document.getElementById(\'email\').value;
            const password = document.getElementById(\'password\').value;
            const remember = document.getElementById(\'remember\').checked;
            
            // Validación básica
            if (!email || !password) {
                showAlert(\'error\', \'Por favor completa todos los campos\');
                return;
            }

            // Mostrar loader
            showLoading(true);
            hideAllAlerts();

            try {
                const response = await fetch(\'auth.php\', {
                    method: \'POST\',
                    headers: {
                        \'Content-Type\': \'application/json\',
                    },
                    body: JSON.stringify({
                        action: \'login\',
                        email: email,
                        password: password,
                        remember: remember
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showAlert(\'success\', \'¡Inicio de sesión exitoso! Redirigiendo...\');
                    
                    // Guardar token si es necesario
                    if (data.token) {
                        sessionStorage.setItem(\'auth_token\', data.token);
                        if (remember) {
                            localStorage.setItem(\'auth_token\', data.token);
                        }
                    }

                    // Redirigir al dashboard
                    setTimeout(() => {
                        window.location.href = \'index.html\';
                    }, 1500);
                } else {
                    loginAttempts++;
                    
                    if (loginAttempts >= maxAttempts) {
                        showAlert(\'error\', \'Demasiados intentos fallidos. Por favor intenta más tarde.\');
                        disableForm(true);
                        setTimeout(() => {
                            loginAttempts = 0;
                            disableForm(false);
                        }, 60000); // Bloquear por 1 minuto
                    } else {
                        showAlert(\'error\', data.message || \'Credenciales incorrectas\');
                        document.getElementById(\'password\').value = \'\';
                        document.getElementById(\'password\').focus();
                    }
                }
            } catch (error) {
                showAlert(\'error\', \'Error de conexión. Por favor intenta nuevamente.\');
                console.error(\'Error:\', error);
            } finally {
                showLoading(false);
            }
        }

        // Mostrar/ocultar loader
        function showLoading(show) {
            const btn = document.getElementById(\'loginBtn\');
            const btnText = document.getElementById(\'btnText\');
            const btnLoader = document.getElementById(\'btnLoader\');
            
            if (show) {
                btn.disabled = true;
                btnText.style.display = \'none\';
                btnLoader.style.display = \'block\';
            } else {
                btn.disabled = false;
                btnText.style.display = \'block\';
                btnLoader.style.display = \'none\';
            }
        }

        // Mostrar alertas
        function showAlert(type, message) {
            const alertId = type + \'Alert\';
            const alert = document.getElementById(alertId);
            if (alert) {
                alert.textContent = message;
                alert.style.display = \'block\';
                
                // Auto-ocultar después de 5 segundos
                setTimeout(() => {
                    alert.style.display = \'none\';
                }, 5000);
            }
        }

        // Ocultar todas las alertas
        function hideAllAlerts() {
            [\'errorAlert\', \'successAlert\', \'infoAlert\'].forEach(id => {
                const alert = document.getElementById(id);
                if (alert) alert.style.display = \'none\';
            });
        }

        // Deshabilitar/habilitar formulario
        function disableForm(disable) {
            const inputs = document.querySelectorAll(\'input, button\');
            inputs.forEach(input => {
                input.disabled = disable;
            });
        }

        // Recuperar contraseña
        function showForgotPassword() {
            showAlert(\'info\', \'Función de recuperación de contraseña próximamente disponible\');
        }

        // Información de registro
        function showRegisterInfo() {
            showAlert(\'info\', \'Por favor contacta al administrador para crear una cuenta\');
        }

        // Verificar si ya hay una sesión activa
        document.addEventListener(\'DOMContentLoaded\', function() {
            const token = sessionStorage.getItem(\'auth_token\') || localStorage.getItem(\'auth_token\');
            
            if (token) {
                // Verificar token
                fetch(\'auth.php\', {
                    method: \'POST\',
                    headers: {
                        \'Content-Type\': \'application/json\',
                    },
                    body: JSON.stringify({
                        action: \'verify\',
                        token: token
                    })
                }).then(response => response.json())
                .then(data => {
                    if (data.valid) {
                        window.location.href = \'index.html\';
                    }
                });
            }

            // Focus en el primer campo
            document.getElementById(\'email\').focus();
        });

        // Manejo de tecla Enter
        document.addEventListener(\'keydown\', function(event) {
            if (event.key === \'Enter\') {
                const activeElement = document.activeElement;
                if (activeElement.tagName === \'INPUT\' && activeElement.type !== \'submit\') {
                    event.preventDefault();
                    const form = activeElement.form;
                    const inputs = Array.from(form.querySelectorAll(\'input:not([type="submit"])\'));
                    const index = inputs.indexOf(activeElement);
                    
                    if (index < inputs.length - 1) {
                        inputs[index + 1].focus();
                    } else {
                        form.requestSubmit();
                    }
                }
            }
        });
    </script>
</body>
</html>';
        
        if (createFile('login.html', $login_html)) {
            $messages[] = ['type' => 'success', 'text' => 'Página de Login creada'];
        } else {
            $messages[] = ['type' => 'error', 'text' => 'Error al crear login.html'];
            $success = false;
        }
        
        // INDEX.HTML
        $index_html = '<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Trafficstars - Estadísticas en Tiempo Real</title>
    
    <!-- CSS Integrado -->
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: #0f0f23;
            color: #e4e4e7;
            line-height: 1.6;
            min-height: 100vh;
        }

        /* Header */
        .header {
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
            padding: 2rem 0;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2rem;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        h1 {
            font-size: 2rem;
            font-weight: 700;
            background: linear-gradient(135deg, #60a5fa 0%, #a78bfa 100%);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            background: rgba(255, 255, 255, 0.05);
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .status-indicator {
            width: 10px;
            height: 10px;
            background: #10b981;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(16, 185, 129, 0); }
            100% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0); }
        }

        /* Tarjetas de Métricas */
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .metric-card {
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 1.5rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .metric-card::before {
            content: \'\';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #60a5fa, #a78bfa);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .metric-card:hover::before {
            transform: scaleX(1);
        }

        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px -10px rgba(96, 165, 250, 0.3);
        }

        .metric-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .metric-title {
            font-size: 0.875rem;
            color: #94a3b8;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .metric-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
        }

        .metric-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .metric-change {
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .positive { color: #10b981; }
        .negative { color: #ef4444; }

        /* Tabla de Estadísticas */
        .stats-section {
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 1.5rem;
            margin: 2rem 0;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .section-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .filters {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .filter-btn {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: #e4e4e7;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.875rem;
        }

        .filter-btn:hover {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .filter-btn.active {
            background: linear-gradient(135deg, #60a5fa 0%, #a78bfa 100%);
            border-color: transparent;
        }

        /* Tabla Responsiva */
        .table-container {
            overflow-x: auto;
            margin-top: 1rem;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            text-align: left;
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        }

        th {
            background: rgba(255, 255, 255, 0.03);
            font-weight: 600;
            color: #94a3b8;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.05em;
        }

        tbody tr {
            transition: background 0.2s ease;
        }

        tbody tr:hover {
            background: rgba(255, 255, 255, 0.02);
        }

        .country-cell {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .flag {
            width: 24px;
            height: 24px;
            border-radius: 4px;
            background: #64748b;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
        }

        .earnings {
            font-weight: 600;
            color: #10b981;
        }

        .cpm {
            color: #60a5fa;
        }

        /* Loader */
        .loader-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(15, 15, 35, 0.9);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .loader {
            width: 50px;
            height: 50px;
            border: 3px solid rgba(255, 255, 255, 0.1);
            border-top-color: #60a5fa;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Modal de Configuración */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            z-index: 2000;
            justify-content: center;
            align-items: center;
            padding: 1rem;
        }

        .modal-content {
            background: #1e293b;
            border-radius: 16px;
            padding: 2rem;
            max-width: 500px;
            width: 100%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            color: #94a3b8;
            font-size: 1.5rem;
            cursor: pointer;
            transition: color 0.2s ease;
        }

        .close-btn:hover {
            color: #e4e4e7;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #94a3b8;
            font-size: 0.875rem;
        }

        input {
            width: 100%;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: #e4e4e7;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        input:focus {
            outline: none;
            border-color: #60a5fa;
            background: rgba(255, 255, 255, 0.08);
        }

        .btn-primary {
            background: linear-gradient(135deg, #60a5fa 0%, #a78bfa 100%);
            color: white;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px -10px rgba(96, 165, 250, 0.5);
        }

        /* Alertas */
        .alert {
            padding: 1rem 1.5rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            display: none;
        }

        .alert-error {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.2);
            color: #fca5a5;
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.2);
            color: #86efac;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                text-align: center;
            }

            h1 {
                font-size: 1.5rem;
            }

            .metric-value {
                font-size: 1.5rem;
            }

            .table-container {
                margin: 0 -1rem;
            }

            th, td {
                padding: 0.75rem 0.5rem;
                font-size: 0.875rem;
            }
        }
    </style>
</head>
<body>
    <!-- Loader -->
    <div class="loader-container" id="loader">
        <div class="loader"></div>
    </div>

    <!-- Header -->
    <header class="header">
        <div class="container">
            <div class="header-content">
                <h1>Dashboard Trafficstars</h1>
                <div class="user-info">
                    <div class="status-indicator"></div>
                    <span id="userName">Usuario</span>
                    <button class="filter-btn" onclick="openSettings()">⚙️ Configuración</button>
                    <button class="filter-btn" onclick="logout()" style="background: rgba(239, 68, 68, 0.1); border-color: rgba(239, 68, 68, 0.2);">🚪 Cerrar Sesión</button>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container">
        <!-- Alertas -->
        <div class="alert alert-error" id="errorAlert"></div>
        <div class="alert alert-success" id="successAlert"></div>

        <!-- Métricas Principales -->
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Visitas Totales</span>
                    <div class="metric-icon" style="background: rgba(96, 165, 250, 0.1); color: #60a5fa;">
                        👁️
                    </div>
                </div>
                <div class="metric-value" id="totalVisits">0</div>
                <div class="metric-change positive">
                    <span>↑</span>
                    <span id="visitsChange">+0%</span>
                </div>
            </div>

            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Ganancias Totales</span>
                    <div class="metric-icon" style="background: rgba(16, 185, 129, 0.1); color: #10b981;">
                        💰
                    </div>
                </div>
                <div class="metric-value" id="totalEarnings">$0.00</div>
                <div class="metric-change positive">
                    <span>↑</span>
                    <span id="earningsChange">+0%</span>
                </div>
            </div>

            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">CPM Promedio</span>
                    <div class="metric-icon" style="background: rgba(167, 139, 250, 0.1); color: #a78bfa;">
                        📊
                    </div>
                </div>
                <div class="metric-value" id="avgCPM">$0.00</div>
                <div class="metric-change positive">
                    <span>↑</span>
                    <span id="cpmChange">+0%</span>
                </div>
            </div>

            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Países Activos</span>
                    <div class="metric-icon" style="background: rgba(251, 191, 36, 0.1); color: #fbbf24;">
                        🌍
                    </div>
                </div>
                <div class="metric-value" id="activeCountries">0</div>
                <div class="metric-change positive">
                    <span>↑</span>
                    <span id="countriesChange">+0</span>
                </div>
            </div>
        </div>

        <!-- Tabla de Estadísticas por País -->
        <div class="stats-section">
            <div class="section-header">
                <h2 class="section-title">Estadísticas por País</h2>
                <div class="filters">
                    <button class="filter-btn active" onclick="setTimeFilter(\'today\')">Hoy</button>
                    <button class="filter-btn" onclick="setTimeFilter(\'week\')">7 Días</button>
                    <button class="filter-btn" onclick="setTimeFilter(\'month\')">30 Días</button>
                    <button class="filter-btn" onclick="refreshData()">🔄 Actualizar</button>
                </div>
            </div>

            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>País</th>
                            <th>Visitas</th>
                            <th>Ganancias</th>
                            <th>CPM</th>
                            <th>% del Total</th>
                        </tr>
                    </thead>
                    <tbody id="countryStatsBody">
                        <!-- Los datos se cargarán dinámicamente -->
                    </tbody>
                </table>
            </div>
        </div>
    </main>

    <!-- Modal de Configuración -->
    <div class="modal" id="settingsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Configuración de API</h3>
                <button class="close-btn" onclick="closeSettings()">×</button>
            </div>
            
            <form id="settingsForm" onsubmit="saveSettings(event)">
                <div class="form-group">
                    <label for="clientId">ID de Cliente</label>
                    <input type="text" id="clientId" placeholder="Ingresa tu Client ID" required>
                </div>
                
                <div class="form-group">
                    <label for="apiSecret">Clave API Secreta</label>
                    <input type="password" id="apiSecret" placeholder="Ingresa tu API Secret" required>
                </div>
                
                <div class="form-group">
                    <label for="refreshInterval">Intervalo de Actualización (segundos)</label>
                    <input type="number" id="refreshInterval" value="300" min="60" max="3600">
                </div>
                
                <button type="submit" class="btn-primary">Guardar Configuración</button>
            </form>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        // Variables globales
        let apiConfig = {
            clientId: \'\',
            apiSecret: \'\',
            refreshInterval: 300
        };

        let currentFilter = \'today\';
        let refreshTimer = null;
        let currentUser = null;

        // Verificar autenticación al cargar
        async function checkAuthentication() {
            try {
                const response = await fetch(\'auth.php\', {
                    method: \'POST\',
                    headers: {
                        \'Content-Type\': \'application/json\',
                    },
                    body: JSON.stringify({
                        action: \'check\'
                    })
                });

                const data = await response.json();

                if (!data.authenticated) {
                    // No autenticado, redirigir al login
                    window.location.href = \'login.html\';
                    return false;
                }

                // Usuario autenticado
                currentUser = data.user;
                document.getElementById(\'userName\').textContent = currentUser.name || currentUser.email;
                
                // Cargar credenciales API del usuario
                await loadUserApiCredentials();
                
                return true;
            } catch (error) {
                console.error(\'Error verificando autenticación:\', error);
                window.location.href = \'login.html\';
                return false;
            }
        }

        // Cargar credenciales API del usuario
        async function loadUserApiCredentials() {
            try {
                const response = await fetch(\'auth.php\', {
                    method: \'POST\',
                    headers: {
                        \'Content-Type\': \'application/json\',
                    },
                    body: JSON.stringify({
                        action: \'get_api_credentials\'
                    })
                });

                const data = await response.json();

                if (data.success && data.credentials) {
                    apiConfig.clientId = data.credentials.client_id || \'\';
                    apiConfig.apiSecret = data.credentials.api_secret || \'\';
                    
                    // También verificar localStorage por si hay configuración local
                    const localClientId = localStorage.getItem(\'ts_client_id\');
                    const localApiSecret = localStorage.getItem(\'ts_api_secret\');
                    
                    if (!apiConfig.clientId && localClientId) {
                        apiConfig.clientId = localClientId;
                    }
                    if (!apiConfig.apiSecret && localApiSecret) {
                        apiConfig.apiSecret = localApiSecret;
                    }
                    
                    apiConfig.refreshInterval = parseInt(localStorage.getItem(\'ts_refresh_interval\') || \'300\');
                }
            } catch (error) {
                console.error(\'Error cargando credenciales:\', error);
            }
        }

        // Función de logout
        async function logout() {
            if (confirm(\'¿Estás seguro de que deseas cerrar sesión?\')) {
                try {
                    await fetch(\'auth.php\', {
                        method: \'POST\',
                        headers: {
                            \'Content-Type\': \'application/json\',
                        },
                        body: JSON.stringify({
                            action: \'logout\'
                        })
                    });

                    // Limpiar almacenamiento local
                    sessionStorage.clear();
                    localStorage.removeItem(\'auth_token\');
                    
                    // Redirigir al login
                    window.location.href = \'login.html\';
                } catch (error) {
                    console.error(\'Error al cerrar sesión:\', error);
                    // Redirigir de todos modos
                    window.location.href = \'login.html\';
                }
            }
        }

        // Inicialización
        document.addEventListener(\'DOMContentLoaded\', async function() {
            // Primero verificar autenticación
            const isAuthenticated = await checkAuthentication();
            
            if (!isAuthenticated) {
                return; // Ya fue redirigido al login
            }

            // Continuar con la inicialización normal
            if (!apiConfig.clientId || !apiConfig.apiSecret) {
                openSettings();
                showAlert(\'error\', \'Por favor configura tus credenciales de API\');
            } else {
                loadDashboard();
                startAutoRefresh();
            }
        });

        // Funciones de UI
        function openSettings() {
            document.getElementById(\'settingsModal\').style.display = \'flex\';
            document.getElementById(\'clientId\').value = apiConfig.clientId;
            document.getElementById(\'apiSecret\').value = apiConfig.apiSecret;
            document.getElementById(\'refreshInterval\').value = apiConfig.refreshInterval;
        }

        function closeSettings() {
            document.getElementById(\'settingsModal\').style.display = \'none\';
        }

        function showLoader() {
            document.getElementById(\'loader\').style.display = \'flex\';
        }

        function hideLoader() {
            document.getElementById(\'loader\').style.display = \'none\';
        }

        function showAlert(type, message) {
            const alertId = type === \'error\' ? \'errorAlert\' : \'successAlert\';
            const alert = document.getElementById(alertId);
            alert.textContent = message;
            alert.style.display = \'block\';
            
            setTimeout(() => {
                alert.style.display = \'none\';
            }, 5000);
        }

        // Guardar configuración
        async function saveSettings(event) {
            event.preventDefault();
            
            apiConfig.clientId = document.getElementById(\'clientId\').value;
            apiConfig.apiSecret = document.getElementById(\'apiSecret\').value;
            apiConfig.refreshInterval = parseInt(document.getElementById(\'refreshInterval\').value);
            
            // Guardar en localStorage
            localStorage.setItem(\'ts_client_id\', apiConfig.clientId);
            localStorage.setItem(\'ts_api_secret\', apiConfig.apiSecret);
            localStorage.setItem(\'ts_refresh_interval\', apiConfig.refreshInterval);
            
            // También actualizar en el servidor
            try {
                await fetch(\'auth.php\', {
                    method: \'POST\',
                    headers: {
                        \'Content-Type\': \'application/json\',
                    },
                    body: JSON.stringify({
                        action: \'update_api_credentials\',
                        client_id: apiConfig.clientId,
                        api_secret: apiConfig.apiSecret
                    })
                });
            } catch (error) {
                console.error(\'Error actualizando credenciales en servidor:\', error);
            }
            
            closeSettings();
            showAlert(\'success\', \'Configuración guardada correctamente\');
            loadDashboard();
            startAutoRefresh();
        }

        // Cambiar filtro de tiempo
        function setTimeFilter(filter) {
            currentFilter = filter;
            
            // Actualizar botones activos
            document.querySelectorAll(\'.filter-btn\').forEach(btn => {
                btn.classList.remove(\'active\');
            });
            event.target.classList.add(\'active\');
            
            loadDashboard();
        }

        // Cargar datos del dashboard
        async function loadDashboard() {
            if (!apiConfig.clientId || !apiConfig.apiSecret) {
                return;
            }
            
            showLoader();
            
            try {
                const response = await fetch(\'api.php\', {
                    method: \'POST\',
                    headers: {
                        \'Content-Type\': \'application/json\',
                    },
                    body: JSON.stringify({
                        action: \'getStats\',
                        clientId: apiConfig.clientId,
                        apiSecret: apiConfig.apiSecret,
                        timeRange: currentFilter
                    })
                });
                
                const data = await response.json();
                
                if (data.error) {
                    throw new Error(data.error);
                }
                
                updateDashboard(data);
                hideLoader();
                showAlert(\'success\', \'Datos actualizados correctamente\');
                
            } catch (error) {
                hideLoader();
                showAlert(\'error\', \'Error al cargar los datos: \' + error.message);
                console.error(\'Error:\', error);
            }
        }

        // Actualizar dashboard con los datos
        function updateDashboard(data) {
            // Actualizar métricas principales
            document.getElementById(\'totalVisits\').textContent = formatNumber(data.totalVisits || 0);
            document.getElementById(\'totalEarnings\').textContent = formatCurrency(data.totalEarnings || 0);
            document.getElementById(\'avgCPM\').textContent = formatCurrency(data.avgCPM || 0);
            document.getElementById(\'activeCountries\').textContent = data.activeCountries || 0;
            
            // Actualizar cambios porcentuales
            document.getElementById(\'visitsChange\').textContent = formatPercentage(data.visitsChange || 0);
            document.getElementById(\'earningsChange\').textContent = formatPercentage(data.earningsChange || 0);
            document.getElementById(\'cpmChange\').textContent = formatPercentage(data.cpmChange || 0);
            document.getElementById(\'countriesChange\').textContent = \'+\' + (data.countriesChange || 0);
            
            // Actualizar tabla de países
            updateCountryTable(data.countryStats || []);
        }

        // Actualizar tabla de países
        function updateCountryTable(countryStats) {
            const tbody = document.getElementById(\'countryStatsBody\');
            tbody.innerHTML = \'\';
            
            if (countryStats.length === 0) {
                tbody.innerHTML = \'<tr><td colspan="5" style="text-align: center; color: #64748b;">No hay datos disponibles</td></tr>\';
                return;
            }
            
            countryStats.forEach(country => {
                const row = document.createElement(\'tr\');
                row.innerHTML = `
                    <td>
                        <div class="country-cell">
                            <div class="flag">${country.flag || country.code}</div>
                            <span>${country.name}</span>
                        </div>
                    </td>
                    <td>${formatNumber(country.visits)}</td>
                    <td class="earnings">${formatCurrency(country.earnings)}</td>
                    <td class="cpm">${formatCurrency(country.cpm)}</td>
                    <td>${country.percentage}%</td>
                `;
                tbody.appendChild(row);
            });
        }

        // Funciones de formato
        function formatNumber(num) {
            return new Intl.NumberFormat(\'es-ES\').format(num);
        }

        function formatCurrency(num) {
            return new Intl.NumberFormat(\'es-ES\', {
                style: \'currency\',
                currency: \'USD\',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(num);
        }

        function formatPercentage(num) {
            const prefix = num >= 0 ? \'+\' : \'\';
            return prefix + num.toFixed(1) + \'%\';
        }

        // Actualización automática
        function startAutoRefresh() {
            if (refreshTimer) {
                clearInterval(refreshTimer);
            }
            
            refreshTimer = setInterval(() => {
                loadDashboard();
            }, apiConfig.refreshInterval * 1000);
        }

        // Actualización manual
        function refreshData() {
            loadDashboard();
        }

        // Cerrar modal al hacer clic fuera
        window.onclick = function(event) {
            const modal = document.getElementById(\'settingsModal\');
            if (event.target === modal) {
                closeSettings();
            }
        }

        // Timeout de sesión
        let sessionTimeout;
        const SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutos

        function resetSessionTimeout() {
            clearTimeout(sessionTimeout);
            sessionTimeout = setTimeout(() => {
                showAlert(\'error\', \'Tu sesión ha expirado. Serás redirigido al login.\');
                setTimeout(() => {
                    logout();
                }, 3000);
            }, SESSION_TIMEOUT);
        }

        // Resetear timeout en cada interacción
        document.addEventListener(\'click\', resetSessionTimeout);
        document.addEventListener(\'keypress\', resetSessionTimeout);
        
        // Iniciar timeout
        resetSessionTimeout();
    </script>
</body>
</html>';
        
        if (createFile('index.html', $index_html)) {
            $messages[] = ['type' => 'success', 'text' => 'Dashboard Principal creado'];
        } else {
            $messages[] = ['type' => 'error', 'text' => 'Error al crear index.html'];
            $success = false;
        }
        
        // Crear archivos PHP
        $messages[] = ['type' => 'header', 'text' => 'Creando archivos PHP...'];
        
        // AUTH.PHP
        $auth_php = '<?php
/**
 * Sistema de Autenticación para Dashboard Trafficstars
 * Maneja login, logout, sesiones y verificación de usuarios
 */

// Definir acceso seguro
define(\'SECURE_ACCESS\', true);

// Incluir configuración de seguridad
if (file_exists(\'security.php\')) {
    require_once \'security.php\';
}

session_start();

// Configuración
define(\'SESSION_LIFETIME\', 86400); // 24 horas
define(\'MAX_LOGIN_ATTEMPTS\', 3);
define(\'LOCKOUT_TIME\', 300); // 5 minutos
define(\'SECRET_KEY\', \''.bin2hex(random_bytes(32)).'\'); // Clave generada automáticamente

// Headers
header(\'Content-Type: application/json\');
header(\'Access-Control-Allow-Origin: *\');
header(\'Access-Control-Allow-Methods: POST, GET, OPTIONS\');
header(\'Access-Control-Allow-Headers: Content-Type, Authorization\');

// Manejo de peticiones OPTIONS para CORS
if ($_SERVER[\'REQUEST_METHOD\'] === \'OPTIONS\') {
    exit(0);
}

/**
 * Clase principal de autenticación
 */
class Authentication {
    private $users;
    private $db_file = \'users.json\'; // En producción usar base de datos real
    
    public function __construct() {
        $this->loadUsers();
    }
    
    /**
     * Cargar usuarios (en producción usar base de datos)
     */
    private function loadUsers() {
        // Usuarios de demostración
        $this->users = [
            \'admin@trafficstars.com\' => [
                \'id\' => 1,
                \'name\' => \'Administrador\',
                \'email\' => \'admin@trafficstars.com\',
                \'password\' => password_hash(\'admin123\', PASSWORD_DEFAULT),
                \'role\' => \'admin\',
                \'api_client_id\' => \'\',
                \'api_secret\' => \'\',
                \'created_at\' => \'2024-01-01\',
                \'last_login\' => null
            ],
            \'user@trafficstars.com\' => [
                \'id\' => 2,
                \'name\' => \'Usuario Demo\',
                \'email\' => \'user@trafficstars.com\',
                \'password\' => password_hash(\'user123\', PASSWORD_DEFAULT),
                \'role\' => \'user\',
                \'api_client_id\' => \'\',
                \'api_secret\' => \'\',
                \'created_at\' => \'2024-01-01\',
                \'last_login\' => null
            ]
        ];
        
        // Intentar cargar usuarios desde archivo
        if (file_exists($this->db_file)) {
            $data = json_decode(file_get_contents($this->db_file), true);
            if ($data) {
                $this->users = array_merge($this->users, $data);
            }
        }
    }
    
    /**
     * Guardar usuarios (en producción usar base de datos)
     */
    private function saveUsers() {
        file_put_contents($this->db_file, json_encode($this->users, JSON_PRETTY_PRINT));
    }
    
    /**
     * Verificar límite de intentos de login
     */
    private function checkLoginAttempts($email) {
        $attempts_key = \'login_attempts_\' . md5($email);
        $lockout_key = \'lockout_until_\' . md5($email);
        
        // Verificar si está bloqueado
        if (isset($_SESSION[$lockout_key]) && $_SESSION[$lockout_key] > time()) {
            $remaining = $_SESSION[$lockout_key] - time();
            throw new Exception("Cuenta bloqueada. Intenta nuevamente en " . ceil($remaining / 60) . " minutos.");
        }
        
        // Contar intentos
        $attempts = isset($_SESSION[$attempts_key]) ? $_SESSION[$attempts_key] : 0;
        
        if ($attempts >= MAX_LOGIN_ATTEMPTS) {
            $_SESSION[$lockout_key] = time() + LOCKOUT_TIME;
            $_SESSION[$attempts_key] = 0;
            throw new Exception("Demasiados intentos fallidos. Cuenta bloqueada temporalmente.");
        }
        
        return $attempts;
    }
    
    /**
     * Registrar intento de login
     */
    private function recordLoginAttempt($email, $success = false) {
        $attempts_key = \'login_attempts_\' . md5($email);
        
        if ($success) {
            unset($_SESSION[$attempts_key]);
            unset($_SESSION[\'lockout_until_\' . md5($email)]);
        } else {
            $_SESSION[$attempts_key] = isset($_SESSION[$attempts_key]) ? $_SESSION[$attempts_key] + 1 : 1;
        }
    }
    
    /**
     * Generar token JWT simple
     */
    private function generateToken($userId, $email) {
        $header = json_encode([\'typ\' => \'JWT\', \'alg\' => \'HS256\']);
        $payload = json_encode([
            \'user_id\' => $userId,
            \'email\' => $email,
            \'exp\' => time() + SESSION_LIFETIME,
            \'iat\' => time()
        ]);
        
        $base64Header = str_replace([\'+\', \'/\', \'=\'], [\'-\', \'_\', \'\'], base64_encode($header));
        $base64Payload = str_replace([\'+\', \'/\', \'=\'], [\'-\', \'_\', \'\'], base64_encode($payload));
        
        $signature = hash_hmac(\'sha256\', $base64Header . "." . $base64Payload, SECRET_KEY, true);
        $base64Signature = str_replace([\'+\', \'/\', \'=\'], [\'-\', \'_\', \'\'], base64_encode($signature));
        
        return $base64Header . "." . $base64Payload . "." . $base64Signature;
    }
    
    /**
     * Verificar token JWT
     */
    private function verifyToken($token) {
        $parts = explode(\'.\', $token);
        
        if (count($parts) != 3) {
            return false;
        }
        
        $header = base64_decode(str_replace([\'-\', \'_\'], [\'+\', \'/\'], $parts[0]));
        $payload = base64_decode(str_replace([\'-\', \'_\'], [\'+\', \'/\'], $parts[1]));
        $signatureProvided = $parts[2];
        
        $base64Header = str_replace([\'+\', \'/\', \'=\'], [\'-\', \'_\', \'\'], base64_encode($header));
        $base64Payload = str_replace([\'+\', \'/\', \'=\'], [\'-\', \'_\', \'\'], base64_encode($payload));
        
        $signature = hash_hmac(\'sha256\', $base64Header . "." . $base64Payload, SECRET_KEY, true);
        $base64Signature = str_replace([\'+\', \'/\', \'=\'], [\'-\', \'_\', \'\'], base64_encode($signature));
        
        if ($base64Signature !== $signatureProvided) {
            return false;
        }
        
        $payloadData = json_decode($payload, true);
        
        // Verificar expiración
        if ($payloadData[\'exp\'] < time()) {
            return false;
        }
        
        return $payloadData;
    }
    
    /**
     * Login de usuario
     */
    public function login($email, $password, $remember = false) {
        try {
            // Verificar intentos de login
            $this->checkLoginAttempts($email);
            
            // Validar entrada
            if (empty($email) || empty($password)) {
                throw new Exception("Email y contraseña son requeridos");
            }
            
            // Verificar si el usuario existe
            if (!isset($this->users[$email])) {
                $this->recordLoginAttempt($email, false);
                throw new Exception("Credenciales incorrectas");
            }
            
            $user = $this->users[$email];
            
            // Verificar contraseña
            if (!password_verify($password, $user[\'password\'])) {
                $this->recordLoginAttempt($email, false);
                throw new Exception("Credenciales incorrectas");
            }
            
            // Login exitoso
            $this->recordLoginAttempt($email, true);
            
            // Actualizar último login
            $this->users[$email][\'last_login\'] = date(\'Y-m-d H:i:s\');
            $this->saveUsers();
            
            // Crear sesión
            $_SESSION[\'user_id\'] = $user[\'id\'];
            $_SESSION[\'user_email\'] = $user[\'email\'];
            $_SESSION[\'user_name\'] = $user[\'name\'];
            $_SESSION[\'user_role\'] = $user[\'role\'];
            $_SESSION[\'login_time\'] = time();
            
            // Generar token
            $token = $this->generateToken($user[\'id\'], $user[\'email\']);
            
            // Si "recordar", extender duración de sesión
            if ($remember) {
                ini_set(\'session.cookie_lifetime\', SESSION_LIFETIME * 7); // 7 días
            }
            
            return [
                \'success\' => true,
                \'token\' => $token,
                \'user\' => [
                    \'id\' => $user[\'id\'],
                    \'name\' => $user[\'name\'],
                    \'email\' => $user[\'email\'],
                    \'role\' => $user[\'role\']
                ]
            ];
            
        } catch (Exception $e) {
            return [
                \'success\' => false,
                \'message\' => $e->getMessage()
            ];
        }
    }
    
    /**
     * Logout de usuario
     */
    public function logout() {
        // Destruir sesión
        $_SESSION = array();
        
        if (ini_get("session.use_cookies")) {
            $params = session_get_cookie_params();
            setcookie(session_name(), \'\', time() - 42000,
                $params["path"], $params["domain"],
                $params["secure"], $params["httponly"]
            );
        }
        
        session_destroy();
        
        return [
            \'success\' => true,
            \'message\' => \'Sesión cerrada exitosamente\'
        ];
    }
    
    /**
     * Verificar si el usuario está autenticado
     */
    public function isAuthenticated() {
        // Verificar sesión
        if (isset($_SESSION[\'user_id\']) && isset($_SESSION[\'login_time\'])) {
            // Verificar expiración de sesión
            if ((time() - $_SESSION[\'login_time\']) > SESSION_LIFETIME) {
                $this->logout();
                return false;
            }
            
            // Actualizar tiempo de actividad
            $_SESSION[\'last_activity\'] = time();
            return true;
        }
        
        return false;
    }
    
    /**
     * Verificar token
     */
    public function verify($token) {
        $payload = $this->verifyToken($token);
        
        if ($payload) {
            return [
                \'valid\' => true,
                \'user\' => [
                    \'id\' => $payload[\'user_id\'],
                    \'email\' => $payload[\'email\']
                ]
            ];
        }
        
        return [\'valid\' => false];
    }
    
    /**
     * Obtener información del usuario actual
     */
    public function getCurrentUser() {
        if ($this->isAuthenticated()) {
            return [
                \'id\' => $_SESSION[\'user_id\'],
                \'email\' => $_SESSION[\'user_email\'],
                \'name\' => $_SESSION[\'user_name\'],
                \'role\' => $_SESSION[\'user_role\']
            ];
        }
        
        return null;
    }
    
    /**
     * Actualizar credenciales API del usuario
     */
    public function updateApiCredentials($email, $clientId, $apiSecret) {
        if (isset($this->users[$email])) {
            $this->users[$email][\'api_client_id\'] = $clientId;
            $this->users[$email][\'api_secret\'] = $apiSecret;
            $this->saveUsers();
            return true;
        }
        return false;
    }
    
    /**
     * Obtener credenciales API del usuario
     */
    public function getApiCredentials($email) {
        if (isset($this->users[$email])) {
            return [
                \'client_id\' => $this->users[$email][\'api_client_id\'],
                \'api_secret\' => $this->users[$email][\'api_secret\']
            ];
        }
        return null;
    }
}

// Procesar peticiones
function processRequest() {
    $auth = new Authentication();
    
    // Obtener datos de la petición
    $input = json_decode(file_get_contents(\'php://input\'), true);
    $action = $input[\'action\'] ?? $_GET[\'action\'] ?? \'\';
    
    switch ($action) {
        case \'login\':
            $email = $input[\'email\'] ?? \'\';
            $password = $input[\'password\'] ?? \'\';
            $remember = $input[\'remember\'] ?? false;
            
            $result = $auth->login($email, $password, $remember);
            echo json_encode($result);
            break;
            
        case \'logout\':
            $result = $auth->logout();
            echo json_encode($result);
            break;
            
        case \'verify\':
            $token = $input[\'token\'] ?? \'\';
            $result = $auth->verify($token);
            echo json_encode($result);
            break;
            
        case \'check\':
            $isAuth = $auth->isAuthenticated();
            $user = $isAuth ? $auth->getCurrentUser() : null;
            
            echo json_encode([
                \'authenticated\' => $isAuth,
                \'user\' => $user
            ]);
            break;
            
        case \'get_api_credentials\':
            if ($auth->isAuthenticated()) {
                $email = $_SESSION[\'user_email\'];
                $credentials = $auth->getApiCredentials($email);
                echo json_encode([
                    \'success\' => true,
                    \'credentials\' => $credentials
                ]);
            } else {
                http_response_code(401);
                echo json_encode([
                    \'success\' => false,
                    \'message\' => \'No autorizado\'
                ]);
            }
            break;
            
        case \'update_api_credentials\':
            if ($auth->isAuthenticated()) {
                $email = $_SESSION[\'user_email\'];
                $clientId = $input[\'client_id\'] ?? \'\';
                $apiSecret = $input[\'api_secret\'] ?? \'\';
                
                $success = $auth->updateApiCredentials($email, $clientId, $apiSecret);
                echo json_encode([
                    \'success\' => $success
                ]);
            } else {
                http_response_code(401);
                echo json_encode([
                    \'success\' => false,
                    \'message\' => \'No autorizado\'
                ]);
            }
            break;
            
        default:
            http_response_code(400);
            echo json_encode([
                \'error\' => \'Acción no válida\'
            ]);
    }
}

// Procesar la petición
processRequest();
?>';
        
        if (createFile('auth.php', $auth_php)) {
            $messages[] = ['type' => 'success', 'text' => 'Sistema de Autenticación creado'];
        } else {
            $messages[] = ['type' => 'error', 'text' => 'Error al crear auth.php'];
            $success = false;
        }
        
        // Continuar con más archivos...
        
        // Cambiar de vuelta al directorio original
        chdir($original_dir);
        
        return [
            'success' => $success,
            'messages' => $messages,
            'path' => $install_path
        ];
        
    } catch (Exception $e) {
        return [
            'success' => false,
            'messages' => [['type' => 'error', 'text' => $e->getMessage()]],
            'path' => $install_path
        ];
    }
}

// Función para crear archivos
function createFile($filename, $content) {
    return file_put_contents($filename, $content) !== false;
}

?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generador Dashboard Trafficstars v2.0</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: #0f0f23;
            color: #e4e4e7;
            line-height: 1.6;
            padding: 2rem;
            min-height: 100vh;
        }
        
        .container {
            max-width: 900px;
            margin: 0 auto;
        }
        
        .header {
            text-align: center;
            margin-bottom: 3rem;
            padding: 2rem;
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            background: linear-gradient(135deg, #60a5fa 0%, #a78bfa 100%);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .subtitle {
            color: #94a3b8;
            font-size: 1.125rem;
        }
        
        .form-card {
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 2rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #94a3b8;
            font-weight: 500;
        }
        
        input[type="text"] {
            width: 100%;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: #e4e4e7;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }
        
        input[type="text"]:focus {
            outline: none;
            border-color: #60a5fa;
            background: rgba(255, 255, 255, 0.08);
        }
        
        .help-text {
            font-size: 0.875rem;
            color: #64748b;
            margin-top: 0.25rem;
        }
        
        .btn-generate {
            width: 100%;
            background: linear-gradient(135deg, #60a5fa 0%, #a78bfa 100%);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 8px;
            font-size: 1.125rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-generate:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(96, 165, 250, 0.5);
        }
        
        .btn-generate:active {
            transform: translateY(0);
        }
        
        .results {
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1.5rem;
            margin-top: 2rem;
        }
        
        .message {
            padding: 0.5rem 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .message-icon {
            font-size: 1.25rem;
        }
        
        .message-header {
            font-weight: 600;
            color: #60a5fa;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
        }
        
        .message-success {
            color: #10b981;
        }
        
        .message-error {
            color: #ef4444;
        }
        
        .message-warning {
            color: #f59e0b;
        }
        
        .final-instructions {
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 2rem;
            margin-top: 2rem;
        }
        
        .final-instructions h2 {
            color: #60a5fa;
            margin-bottom: 1rem;
        }
        
        .final-instructions ul {
            margin-left: 1.5rem;
            color: #cbd5e1;
        }
        
        .final-instructions li {
            margin-bottom: 0.5rem;
        }
        
        .credentials-box {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.2);
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
        }
        
        .credentials-box strong {
            color: #10b981;
        }
        
        .warning-box {
            background: rgba(245, 158, 11, 0.1);
            border: 1px solid rgba(245, 158, 11, 0.2);
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
            color: #fbbf24;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Generador Dashboard Trafficstars</h1>
            <p class="subtitle">Sistema Completo con Autenticación y Seguridad v2.0</p>
        </div>
        
        <?php if (!isset($_POST['generate'])): ?>
        <div class="form-card">
            <form method="POST">
                <div class="form-group">
                    <label for="install_path">Directorio de Instalación</label>
                    <input type="text" id="install_path" name="install_path" placeholder="<?php echo __DIR__; ?>">
                    <p class="help-text">Deja vacío para instalar en el directorio actual</p>
                </div>
                
                <button type="submit" name="generate" value="1" class="btn-generate">
                    🚀 Generar Proyecto Completo
                </button>
            </form>
        </div>
        
        <div class="form-card">
            <h3 style="color: #60a5fa; margin-bottom: 1rem;">📋 ¿Qué incluye?</h3>
            <ul style="margin-left: 1.5rem; color: #cbd5e1;">
                <li>✅ Sistema de Login completo</li>
                <li>✅ Dashboard con estadísticas en tiempo real</li>
                <li>✅ Integración con API de Trafficstars</li>
                <li>✅ Sistema de autenticación seguro</li>
                <li>✅ Interfaz moderna y responsive</li>
                <li>✅ Configuración de seguridad incluida</li>
                <li>✅ Documentación completa</li>
            </ul>
        </div>
        
        <?php else: ?>
        <div class="results">
            <h2 style="color: #60a5fa; margin-bottom: 1rem;">📊 Resultados de la Generación</h2>
            
            <?php foreach ($result['messages'] as $msg): ?>
                <?php if ($msg['type'] === 'header'): ?>
                    <div class="message-header"><?php echo htmlspecialchars($msg['text']); ?></div>
                <?php else: ?>
                    <div class="message message-<?php echo $msg['type']; ?>">
                        <span class="message-icon">
                            <?php
                            $icons = [
                                'success' => '✅',
                                'error' => '❌',
                                'warning' => '⚠️',
                                'info' => 'ℹ️'
                            ];
                            echo $icons[$msg['type']] ?? '•';
                            ?>
                        </span>
                        <span><?php echo htmlspecialchars($msg['text']); ?></span>
                    </div>
                <?php endif; ?>
            <?php endforeach; ?>
        </div>
        
        <?php if ($result['success']): ?>
        <div class="final-instructions">
            <h2>✅ ¡Proyecto Generado Exitosamente!</h2>
            
            <p><strong>Ubicación:</strong> <?php echo htmlspecialchars($result['path']); ?></p>
            
            <h3 style="margin-top: 1.5rem; color: #94a3b8;">Próximos pasos:</h3>
            <ul>
                <li>Configura tu servidor web para apuntar a: <code><?php echo htmlspecialchars($result['path']); ?></code></li>
                <li>Asegúrate de tener HTTPS habilitado</li>
                <li>Accede a tu dashboard en: <code>https://tudominio.com/login.html</code></li>
            </ul>
            
            <div class="credentials-box">
                <strong>🔐 Credenciales de Prueba:</strong><br>
                Email: admin@trafficstars.com<br>
                Contraseña: admin123
            </div>
            
            <div class="warning-box">
                <strong>⚠️ IMPORTANTE:</strong><br>
                • Cambia las contraseñas por defecto inmediatamente<br>
                • Actualiza config.secure.php con tus configuraciones<br>
                • Verifica que las carpetas tengan los permisos correctos
            </div>
            
            <p style="margin-top: 1.5rem; text-align: center;">
                <a href="<?php echo htmlspecialchars($result['path']); ?>/login.html" 
                   style="color: #60a5fa; text-decoration: none; font-weight: 600;">
                   🚀 Ir al Dashboard →
                </a>
            </p>
        </div>
        <?php endif; ?>
        
        <?php endif; ?>
    </div>
</body>
</html>